?t
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
t(dataMatrix)[, nrow(dataMatrix):1]
?image
t(dataMatrix)[, nrow(dataMatrix):1]$x
t(dataMatrix)[, nrow(dataMatrix):1][x,]
t(dataMatrix)[, nrow(dataMatrix):1]['x',]
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addMarkers(lat=39.2980803, lng=-76.5898801, popup="Jef Lee's office")
my_map
my_map <- leaflet() %>% addMarkers(lat=39.2980803, lng=-76.5898801, popup="Jef Lee's office") %>% addTiles()
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 122.4783, lon = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 122.4783, lng = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = -122.4783, lng = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 37.8199, lng = -122.4783, popup = "Golden Gate Bridge")
my_map
?dgamma
methods(mean)
methods(dgamma)
methods(show)
methods(lm)
methods(predict)
methods(colSums)
?colSums
methods("colSums")
colSums
mean
dgamma
show
lm
predict()
predict
colSums
showMethod(colSums)
showMethods(colSums)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
data("mtcars")
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
mtcars
plot_ly(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, color = mtcars$cyl, mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, color = as.factor(mtcars$cyl), mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, xlab="Weight", color = as.factor(mtcars$cyl), mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, xlab="Weight", color = as.factor(mtcars$cyl), mode="markers")
?plot_ly
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
add_paths(p, linetype = ~Species)
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
data("iris")
plot_ly(iris, y=Petal.Length, color=Species, type="box")
plot_ly(iris, y=iris$Petal.Length, color=iris$Species, type="box")
```{r trigram, warning=FALSE, error=FALSE, message=FALSE}
install.packages("wordcloud")
??wordcloud
library(wordcloud)
worcloud(c("Hi","Bye","Why"),c(.2,.5,.3))
wordcloud(c("Hi","Bye","Why"),c(.2,.5,.3))
?wordcloud
wordcloud(c("Hi","Bye","Why"),c(2,5,3))
wordcloud(c("Hi","Bye","Why"),c(2,5,3))
wordcloud(c("Hi","Bye","Why"),c(20,50,30))
?wordcloud
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), random.color = T)
shiny::runApp('Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest')
runApp('Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest')
unigram[1:5,c("ngram","freq")]
unigram[c("ngram","freq")]
unigram["ngram","freq"]
return (returnVal[1:5])
returnVal <- subset(tribiuni, select=c("nextword","prob"))
source('~/Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest/predictionModel.R', echo=TRUE)
runApp('Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest')
source('~/Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest/predictionModel.R', echo=TRUE)
setwd("~/Coursera/DataScience/data-science-project/TextPredictionApp")
source('~/Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest/predictionModel.R', echo=TRUE)
setwd("./WordSuggest")
source('~/Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest/predictionModel.R', echo=TRUE)
source('~/Coursera/DataScience/data-science-project/TextPredictionApp/WordSuggest/predictionModel.R', echo=TRUE)
backoff_trigram( "Case", "of", dis_tri = 0.5, dis_bi = 0.5)
u ="case"
v="of"
uv <- paste(u, v, sep = " ")
trigram_uv <- trigram[phrase == uv]
count_uv <- trigram_uv[,sum(freq)]
trigram_uv$prob <- (trigram_uv$freq - dis_tri)/count_uv
dis_tri = 0.5
dis_bi = 0.5
trigram_uv$prob <- (trigram_uv$freq - dis_tri)/count_uv
alpha_tri = nrow(trigram_uv)*dis_tri / count_uv
missing_words_trigram <- setdiff(unigram$ngram, trigram_uv$nextword)
# of the missing words in trigram find the ones that apepar in bigram
bigram_v <- bigram[phrase == v][nextword %in% missing_words_trigram]
count_v <- bigram_v[,sum(freq)]
bigram_v$prob <- (bigram_v$freq - dis_bi)/count_v
alpha_bi = nrow(bigram_v)*dis_bi / count_v
#also missing in bigram
missing_words_bigram <- setdiff(missing_words_trigram, bigram_v$nextword)
n <- length(missing_words_bigram)
unigram_w <- unigram[ngram %in% missing_words_bigram]
unigram_w$nextword <- unigram_w$ngram
count_w <- unigram_w[,sum(freq)]
unigram_w$prob <- alpha_bi * unigram_w$freq / count_w
#merge uni and bi to get qbo(wi/wi-1)
l <- list(bigram_v, unigram_w)
biuni<- rbindlist(l, use.names=TRUE, fill=TRUE)
#merge this with tri to get qbo(wi/wi-1,wi-2)
biuni$prob <- alpha_tri* biuni$prob
l=list(trigram_uv, biuni)
tribiuni<- rbindlist(l, use.names=TRUE, fill=TRUE)
tribiuni <- tribiuni[order(prob, decreasing = TRUE)]
returnVal <- subset(tribiuni, select=c("nextword","prob"))
returnVal[1:5]
backoff_trigram( "case", "of", dis_tri = 0.5, dis_bi = 0.5)
as.character(suggestion$nextword)
suggestion <- backoff_trigram( "case", "of", dis_tri = 0.5, dis_bi = 0.5)
as.character(suggestion$nextword)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?wordcloud
wordcloud(c("Hi","Bye","Why"),c(20,50,30), colors=pal)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), scale(8,.2))
wordcloud(c("Hi","Bye","Why"),c(20,50,30), scale=c(8,.2))
?wordcloud
wordcloud(c("Hi","Bye","Why"),c(20,50,30), scale=c(8,.2), color=brewer.pal(8, "Dark2"))
wordcloud(c("Hi","Bye","Why"),c(20,50,30), scale=c(8,.2), color=brewer.pal(8, "Dark2"), rot.per=.15)
wordcloud(c("Hi","Bye","Why"),c(20,50,30), scale=c(8,.2), color=brewer.pal(8, "Dark2"), rot.per=.15)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
