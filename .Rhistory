?t
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
t(dataMatrix)[, nrow(dataMatrix):1]
?image
t(dataMatrix)[, nrow(dataMatrix):1]$x
t(dataMatrix)[, nrow(dataMatrix):1][x,]
t(dataMatrix)[, nrow(dataMatrix):1]['x',]
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addMarkers(lat=39.2980803, lng=-76.5898801, popup="Jef Lee's office")
my_map
my_map <- leaflet() %>% addMarkers(lat=39.2980803, lng=-76.5898801, popup="Jef Lee's office") %>% addTiles()
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 122.4783, lon = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 122.4783, lng = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = -122.4783, lng = 37.8199, popup = "Golden Gate Bridge")
my_map
my_map <- leaflet() %>% addTiles() %>%
addMarkers(lat = 37.8199, lng = -122.4783, popup = "Golden Gate Bridge")
my_map
?dgamma
methods(mean)
methods(dgamma)
methods(show)
methods(lm)
methods(predict)
methods(colSums)
?colSums
methods("colSums")
colSums
mean
dgamma
show
lm
predict()
predict
colSums
showMethod(colSums)
showMethods(colSums)
library(plotly)
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
data("mtcars")
plot_ly(mtcars, x = wt, y = mpg, mode="markers")
mtcars
plot_ly(mtcars)
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, color = mtcars$cyl, mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, color = as.factor(mtcars$cyl), mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, xlab="Weight", color = as.factor(mtcars$cyl), mode="markers")
plot_ly(mtcars, x = mtcars$wt, y = mtcars$mpg, xlab="Weight", color = as.factor(mtcars$cyl), mode="markers")
?plot_ly
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
add_paths(p, linetype = ~Species)
p <- plot_ly(iris, x = ~Sepal.Width, y = ~Sepal.Length)
add_markers(p, color = ~Petal.Length, size = ~Petal.Length)
add_markers(p, color = ~Species)
add_markers(p, color = ~Species, colors = "Set1")
add_markers(p, symbol = ~Species)
data("iris")
plot_ly(iris, y=Petal.Length, color=Species, type="box")
plot_ly(iris, y=iris$Petal.Length, color=iris$Species, type="box")
```{r trigram, warning=FALSE, error=FALSE, message=FALSE}
setwd("~/Coursera/DataScience/data-science-project/TextPredictionApp")
trigram <- data.table(readRDS("./ngrams/3_gram_train.rds"))
# set working directory to root of the project folder
setwd("~/Coursera/DataScience/data-science-project/TextPredictionApp")
library(data.table)
library(tm)
